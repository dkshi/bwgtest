// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	bwgtest "github.com/dkshi/bwgtest"
	gomock "github.com/golang/mock/gomock"
)

// MockQuotations is a mock of Quotations interface.
type MockQuotations struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationsMockRecorder
}

// MockQuotationsMockRecorder is the mock recorder for MockQuotations.
type MockQuotationsMockRecorder struct {
	mock *MockQuotations
}

// NewMockQuotations creates a new mock instance.
func NewMockQuotations(ctrl *gomock.Controller) *MockQuotations {
	mock := &MockQuotations{ctrl: ctrl}
	mock.recorder = &MockQuotationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotations) EXPECT() *MockQuotationsMockRecorder {
	return m.recorder
}

// GetLatestQuotation mocks base method.
func (m *MockQuotations) GetLatestQuotation(codeFrom, codeTo string) (*bwgtest.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestQuotation", codeFrom, codeTo)
	ret0, _ := ret[0].(*bwgtest.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestQuotation indicates an expected call of GetLatestQuotation.
func (mr *MockQuotationsMockRecorder) GetLatestQuotation(codeFrom, codeTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestQuotation", reflect.TypeOf((*MockQuotations)(nil).GetLatestQuotation), codeFrom, codeTo)
}

// GetQuotation mocks base method.
func (m *MockQuotations) GetQuotation(updateID int) (*bwgtest.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotation", updateID)
	ret0, _ := ret[0].(*bwgtest.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotation indicates an expected call of GetQuotation.
func (mr *MockQuotationsMockRecorder) GetQuotation(updateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotation", reflect.TypeOf((*MockQuotations)(nil).GetQuotation), updateID)
}

// InsertQuotation mocks base method.
func (m *MockQuotations) InsertQuotation(from, to string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQuotation", from, to)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertQuotation indicates an expected call of InsertQuotation.
func (mr *MockQuotationsMockRecorder) InsertQuotation(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQuotation", reflect.TypeOf((*MockQuotations)(nil).InsertQuotation), from, to)
}

// ListenQuotationUpdates mocks base method.
func (m *MockQuotations) ListenQuotationUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenQuotationUpdates")
}

// ListenQuotationUpdates indicates an expected call of ListenQuotationUpdates.
func (mr *MockQuotationsMockRecorder) ListenQuotationUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenQuotationUpdates", reflect.TypeOf((*MockQuotations)(nil).ListenQuotationUpdates))
}
